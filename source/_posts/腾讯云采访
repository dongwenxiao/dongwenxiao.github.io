1、请您向读者做一下自我介绍。
董文枭，10年全栈开发技术经验，目前在猎豹移动负责平台前端部管理和公司前端专业通道。

2、请简要的介绍一下您所在的团队（比如技术栈、负责的业务、前后端分工？不用涉及细节）
我的团队是平台前端部，负责公司AI、机器人、广告系统等业务和对外网站业务，团队里主要包括前端工程师和Node全栈工程师。

3、基于什么背景和问题，使您的团队考虑采用SSR的技术方案？
追求极致的用户体验，HTML、CSS、JS、其他资源都做到按需加载。这里的SSR更是Isomorphic（前后端同构），把SSR（Server Side Render）和CSR（Client Side Render）的优点结合，让用户浏览网页的时候不管是首屏还是随后操作的其他页都能更快的展示响应。

4、您的团队使用SSR技术方案时，有没有进行一些调研？基于什么考虑让你们决定选择现在的方案。
我们团队在16年的时候开始使用React，17年就开始研究并尝试React Server Render，同期Facebook的网站已经采用Isomorphic技术实现，性能非常。为了满足公司业务需求和技术传承，我们自研了猎豹的前端技术框架Koot.js，已成为猎豹前端的主要技术方案。

5、能否从技术角度进行分享，目前在您团队中使用的SSR方案是什么样的？基于什么样的架构，有哪些模块？
Koot.js包含了SSR，也是我们团队自研的方案，所以都是在用它。
Koot.js基于React、Koa、Webpack来架构的，其中用Koa搭建的Node作为开发服务和部署时候的SSR服务，页面渲染主要是用React+Redux完成的一套代码在浏览器环境和Node环境通用，利用Webpack可编程性动态生成配置并执行，打包出多场景（开发、测试和线上环境等）多端代码（前端、服务端）部署。同时在开发过程中配合了自研工具和模块来辅助开发，如koot-router、koot-redux、koot-webpack进行了封装简化调用方法，提升开发效率；koot-cli完成脚手架模板选择、项目配置等；koot-i18n提供了多模式多语言方案，可以做到正常开发，打包后多语言内容按需加载的效果；集成了koot-analyze分析代码、预制eslint规范的koot版本等满足了日常工作所需的大部分技术点。

6、SSR的技术方案，最终落地过程是否顺畅，是否遇到了一些问题，是如何解决的？
在SSR项目落地的时候通常不是很顺畅，项目部署的时候需要具备服务器技术能力才能和运维顺畅沟通，所以项目落地不仅要前端同学掌握后端开发能力还要对运维技术、并发等问题多方面考虑，这对前端技术同学的技术全面行有较高要求。
去年我们开始接触ServerLess技术，可以降低前端对服务端和运维的技术能力，更适合大部要做分SSR的前端团队。调研了几大云厂商ServerLess服务，因为易用性最后选择了腾讯云。

7、目前的SSR方案推动了您所在团队哪些协作模式或分工的优化？
我们很早就做了前端分离的开发，前后端完全使用API对接，协作改变不大。因为我们做了Isomorphic，所以对API的要求会变高，用户的请求不止来源于Node服务器，还有来自浏览器的请求，对安全性要求会高一些。

8、从您的视角，目前的SSR方案是否还需要一些改进支出？
我认为将来的SSR都应该是Isomorphic的模式，带来的好处是减少传输成本，分摊渲染压力，让用户体验也会有所提升。体验的提升其实非常小，网路情况好时，用户几乎感知不到，但小小的提升在技术开发中却做出了非常多的工作，因此我们会把技术框架做的越来越完善，让业务开发同学能够快速开发出需求，同时又享有Isomorphic带来的技术体验。

9、请给其他还没做SSR的团队几条建议。
如果要做ToC的产品，建议做SSR尝试，让用户尽快的看见页面内容总是更好的。
前端的SSR一定会考虑是否需要Isomorphic，如果小团队建议先从比较流行的框架着手尝试，如Next.js、Nuxt.js等，也推荐体验我们的Koot.js，从零开始搭建框架坑太多了，如果没有足够业务支持不要浪费精力自己去做框架，学会一个框架的成本要远小于维护一个框架的成本。